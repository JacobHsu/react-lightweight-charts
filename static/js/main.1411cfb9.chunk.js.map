{"version":3,"sources":["App.js","api.js","reportWebVitals.js","index.js"],"names":["App","chartContainerRef","useRef","useEffect","fetch","process","method","then","response","json","data","res","candlesData","volumeData","chart","createChart","current","width","height","layout","backgroundColor","textColor","grid","vertLines","color","horzLines","addCandlestickSeries","upColor","downColor","wickUpColor","wickDownColor","borderVisible","setData","smaData","count","avg","sum","i","length","close","result","len","val","slice","push","time","value","calculateSMA","addLineSeries","lineWidth","addHistogramSeries","priceFormat","type","overlay","priceScaleId","scaleMargins","top","bottom","volumeSeries","candlestickSeries","className","ref","href","target","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOA2GeA,MA7Bf,WACE,IAAMC,EAAoBC,mBAO1B,OANAC,qBAAU,WC3EHC,MADKC,2DACM,CAChBC,OAAQ,QAEPC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAUA,KDwELH,MAAM,SAAAI,IA3EA,SAACV,EAAmBW,EAAaC,GAEpD,IAAMC,EAAQC,YAAYd,EAAkBe,QAAS,CACnDC,MAAO,IAAKC,OAAQ,IACpBC,OAAQ,CACNC,gBAAiB,UACjBC,UAAW,WAEbC,KAAM,CACJC,UAAW,CACTC,MAAO,uBAETC,UAAW,CACTD,MAAO,4BAIaV,EAAMY,qBAAqB,CACnDC,QAAS,kBACTC,UAAW,iBACXC,YAAa,kBACbC,cAAe,iBACfC,eAAe,IAECC,QAAQpB,GAO1B,IAAIqB,EAOJ,SAAsBvB,EAAMwB,GAS1B,IARA,IAAIC,EAAM,SAASzB,GAEjB,IADA,IAAI0B,EAAM,EACDC,EAAI,EAAGA,EAAI3B,EAAK4B,OAAQD,IAC9BD,GAAO1B,EAAK2B,GAAGE,MAElB,OAAOH,EAAM1B,EAAK4B,QAEhBE,EAAS,GACJH,EAAEH,EAAQ,EAAGO,EAAI/B,EAAK4B,OAAQD,EAAII,EAAKJ,IAAI,CAClD,IAAIK,EAAMP,EAAIzB,EAAKiC,MAAMN,EAAIH,EAAQ,EAAGG,IACxCG,EAAOI,KAAK,CAAEC,KAAMnC,EAAK2B,GAAGQ,KAAMC,MAAOJ,IAE3C,OAAOF,EApBKO,CAAanC,EAAa,IAC1BE,EAAMkC,cAAc,CAChCxB,MAAO,uBACPyB,UAAW,IAELjB,QAAQC,GAmBGnB,EAAMoC,mBAAmB,CAC1C1B,MAAO,UACPyB,UAAW,EACXE,YAAa,CACXC,KAAM,UAERC,SAAS,EACTC,aAAc,GACdC,aAAc,CACZC,IAAK,GACLC,OAAQ,KAICzB,QAAQnB,GAOjB6C,CAAazD,EAAmBU,EAAI6B,OAAOmB,kBAAmBhD,EAAI6B,OAAOkB,oBAK3E,qBAAKE,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UAEE,qBAAKC,IAAK5D,EAAmB2D,UAAU,oBACvC,sCACO,8CADP,0BAGA,mBACEA,UAAU,WACVE,KAAK,sBACLC,OAAO,SACPC,IAAI,sBAJN,+BElFOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5D,MAAK,YAAkD,IAA/C6D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.1411cfb9.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport { createChart } from 'lightweight-charts';\n// import { maxBy, minBy } from 'lodash'\nimport './App.css';\nimport {getStock} from \"./api\"\n\nconst volumeSeries = (chartContainerRef, candlesData, volumeData) => {\n  \n  const chart = createChart(chartContainerRef.current, { \n    width: 400, height: 300 ,\n    layout: {\n      backgroundColor: '#131722',\n      textColor: '#d1d4dc',\n    },\n    grid: {\n      vertLines: {\n        color: 'rgba(42, 46, 57, 0)',\n      },\n      horzLines: {\n        color: 'rgba(42, 46, 57, 0.6)',\n      },\n    },\n  });\n  const candlestickSeries = chart.addCandlestickSeries({\n    upColor: 'rgb(38,166,154)',\n    downColor: 'rgb(255,82,82)',\n    wickUpColor: 'rgb(38,166,154)',\n    wickDownColor: 'rgb(255,82,82)',\n    borderVisible: false,\n  });\n  candlestickSeries.setData(candlesData);\n\n  // const candleHigh = maxBy(candlesData,'high')\n  // const high = candleHigh.high\n  // const candleLow = minBy(candlesData,'low')\n  // const low = candleLow.low\n\n  var smaData = calculateSMA(candlesData, 10);\n  var smaLine = chart.addLineSeries({\n    color: 'rgba(4, 111, 232, 1)',\n    lineWidth: 2,\n  });\n  smaLine.setData(smaData);\n\n  function calculateSMA(data, count){\n    var avg = function(data) {\n      var sum = 0;\n      for (var i = 0; i < data.length; i++) {\n         sum += data[i].close;\n      }\n      return sum / data.length;\n    };\n    var result = [];\n    for (var i=count - 1, len=data.length; i < len; i++){\n      var val = avg(data.slice(i - count + 1, i));\n      result.push({ time: data[i].time, value: val});\n    }\n    return result;\n  }\n\n\n  var volumeSeries = chart.addHistogramSeries({\n    color: '#192436',\n    lineWidth: 2,\n    priceFormat: {\n      type: 'volume',\n    },\n    overlay: true,\n    priceScaleId: '',\n    scaleMargins: {\n      top: 0.8,\n      bottom: 0,\n    },\n  });\n\n  volumeSeries.setData(volumeData);\n}\n\nfunction App() {\n  const chartContainerRef = useRef();\n  useEffect(() => {\n    getStock().then( res =>{\n      volumeSeries(chartContainerRef, res.result.candlestickSeries, res.result.volumeSeries)\n    })\n  })\n\n  return (\n    <div className=\"App\">      \n      <header className=\"App-header\">\n\n        <div ref={chartContainerRef} className=\"chart-container\"/>\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// https://react-lightweight-server.vercel.app/api/v1/stock\n// http://localhost:3000/api/v1/stock\n// http://localhost:8080/api/vt\nexport const getStock = () => {\n  const API = process.env.REACT_APP_API;\n  return fetch(API, {\n    method: 'GET',\n  })\n    .then((response) => response.json())\n    .then((data) => data);\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import Ma from './Ma';\n// import Range from './Range';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}